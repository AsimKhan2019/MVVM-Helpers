<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
  <CodeSnippet Format="1.0.0">
    <Header>
      <SnippetTypes>
        <SnippetType>Expansion</SnippetType>
      </SnippetTypes>
      <Title>Read-Only Dependency Property snippet</Title>
      <Author>Mark Smith</Author>
      <Description>Create a Read-only Dependency Property</Description>
      <HelpUrl>http://mvvmhelpers.codeplex.com</HelpUrl>
      <Shortcut>wpfdpr</Shortcut>
    </Header>
    <Snippet>
      <Declarations>
        <Literal Editable="true">
          <ID>propertyName</ID>
          <ToolTip>Property Name</ToolTip>
          <Default>IsSomeProperty</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>propertyType</ID>
          <ToolTip>Property Type</ToolTip>
          <Default>bool</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>ownerclass</ID>
          <ToolTip>The owning class of this property (which is typically the class in which it is declared).</ToolTip>
          <Default>ownerclass</Default>
          <Function>ClassName()</Function>
        </Literal>
        <Literal Editable="true">
          <ID>defaultValue</ID>
          <ToolTip>The default value for this property.</ToolTip>
          <Default>true</Default>
          <Function>
          </Function>
        </Literal>
        <Literal Editable="true">
          <ID>options</ID>
          <ToolTip>The options for this dependency property (only applies to framework properties).</ToolTip>
          <Default>.None</Default>
          <Function>
          </Function>
        </Literal>
      </Declarations>
      <Code Language="csharp"><![CDATA[/// <summary>
/// $propertyName$ Read-Only Dependency Property
/// </summary>
private static readonly DependencyPropertyKey $propertyName$PropertyKey = 
        DependencyProperty.RegisterReadOnly("$propertyName$", typeof($propertyType$), typeof($ownerclass$),
        new FrameworkPropertyMetadata(($propertyType$)$defaultValue$, FrameworkPropertyMetadataOptions$options$,
            new PropertyChangedCallback(On$propertyName$Changed)));

public static readonly DependencyProperty $propertyName$Property = $propertyName$PropertyKey.DependencyProperty;

/// <summary>
/// Gets the $propertyName$ property.  
/// </summary>
public $propertyType$ $propertyName$
{
    get { return ($propertyType$)GetValue($propertyName$Property); }
}

/// <summary>
/// Provides a secure method for setting the $propertyName$ property.  
/// </summary>
/// <param name="value">The new value for the property.</param>
private void Set$propertyName$($propertyType$ value)
{
    SetValue($propertyName$PropertyKey, value);
}

/// <summary>
/// Handles changes to the $propertyName$ property.
/// </summary>
private static void On$propertyName$Changed(DependencyObject d, DependencyPropertyChangedEventArgs e)
{
    (($ownerclass$)d).On$propertyName$Changed(($propertyType$)e.OldValue, ($propertyType$)e.NewValue);
}

/// <summary>
/// Handler for changes to the $propertyName$ property.
/// </summary>
protected virtual void On$propertyName$Changed($propertyType$ oldValue, $propertyType$ newValue)
{
}
]]></Code>
    </Snippet>
  </CodeSnippet>
</CodeSnippets>